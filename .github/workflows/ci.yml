# name: Build and Deploy

# on:
#   push:
#     branches:
#       - main

# jobs:
#   build-and-deploy:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3

#       - name: Build Images
#         run: docker build -t prathibha097/management-build .

#       - name: Push Build Images to DockerHub
#         env:
#           DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
#         run: |
#           echo $DOCKER_PASSWORD | docker login -u prathibha097 --password-stdin
#           docker push prathibha097/management-build

#       - name: Update Docker Container on EC2
#         env:
#           PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
#         run: |
#           echo "$PRIVATE_KEY" > key.pem
#           chmod 400 key.pem
#           ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=60 -i key.pem ec2-user@ec2-34-217-133-161.us-west-2.compute.amazonaws.com << 'EOF'
#           docker pull prathibha097/management-build
#           docker stop management-container
#           docker rm -f management-container
#           docker run -p 5000:5000 --name=management-container-new --restart always -d prathibha097/management-build
#           docker update --link --volumes-from=management-container management-container-new
#           docker rename management-container-new management-container
#           exit
#           EOF

#       # - name: Remove Unused Docker Images
#       #   run: |
#       #     docker image rm -f prathibha097/management-build
#       #     docker system prune -f

name: Build, Deploy, and Set Up Load Balancer

on:
  push:
    branches:
      - main

jobs:
  build-deploy-and-load-balance:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        container_name: [management-container-1, management-container-2]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Build Images
        run: docker build -t prathibha097/management-build .

      - name: Push Build Images to DockerHub
        env:
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo $DOCKER_PASSWORD | docker login -u prathibha097 --password-stdin
          docker push prathibha097/management-build

      - name: Update Docker Containers on EC2
        env:
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
        run: |
          echo "$PRIVATE_KEY" > key.pem
          chmod 400 key.pem

          # Remove old images and prune the Docker system
          docker image prune -af
          docker system prune -af

          ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=60 -i key.pem ec2-user@ec2-34-217-133-161.us-west-2.compute.amazonaws.com << 'EOF'
          docker pull prathibha097/management-build

          # Stop the old containers gracefully
          docker stop ${{ matrix.container_name }}
          docker rm ${{ matrix.container_name }}

          # Start the new containers with unique names (using timestamp)
          TIMESTAMP=$(date '+%Y%m%d%H%M%S')

          # Use dynamic port assignment for the containers
          docker run -d --name=${{ matrix.container_name }}-new-${TIMESTAMP} -P prathibha097/management-build

          exit
          EOF

      - name: Get Container Ports
        id: get_port1
        run: |
          echo "::set-output name=port::$(docker port management-container-1-new-${TIMESTAMP} 5000 | cut -d ':' -f 2)"

      - name: Get Container Ports
        id: get_port2
        run: |
          echo "::set-output name=port::$(docker port management-container-2-new-${TIMESTAMP} 5000 | cut -d ':' -f 2)"

      - name: Create Nginx Config Directory
        run: |
          # Create the sites-available directory if it doesn't exist
          sudo mkdir -p /etc/nginx/sites-available

      - name: Install Nginx (if not already installed)
        run: |
          sudo apt-get update
          sudo apt-get install -y nginx

      - name: Start Nginx (if not already running)
        run: |
          sudo service nginx start

      - name: Configure Nginx
        run: |
          # Create the sites-available and sites-enabled directories if they don't exist
          sudo mkdir -p /etc/nginx/sites-available
          sudo mkdir -p /etc/nginx/sites-enabled

          # Create a new Nginx configuration file for the load balancer
          cat << EOF | sudo tee /etc/nginx/sites-available/load_balancer
          upstream backend {
             # Change to the appropriate container ports (5000 and 5001 in this example)
             server 127.0.0.1:${{ steps.get_port1.outputs.port }};
             server 127.0.0.1:${{ steps.get_port2.outputs.port }};
          }
          
          server {
              listen 80;
              location / {
                  proxy_pass http://backend;
              }
          }

          events {
            
          }
          EOF

          # Create a symbolic link to enable the configuration
          sudo ln -s /etc/nginx/sites-available/load_balancer /etc/nginx/sites-enabled/load_balancer

          # Test the Nginx configuration for syntax errors
          sudo nginx -t

          # Reload Nginx to apply the new configuration
          sudo service nginx reload

      - name: Sleep to allow traffic to shift gradually
        run: sleep 10

      - name: Remove old Nginx configuration and start the new containers
        run: |
          # Check if the new containers exist before attempting to rename them
          if [ "$(docker ps -aqf name=${{ matrix.container_name }}-new-${TIMESTAMP})" ]; then
            # Stop the old containers
            docker stop ${{ matrix.container_name }}
            # Check if the old Nginx configuration exists before removing it
            if [ -f "/etc/nginx/sites-available/${{ matrix.container_name }}" ]; then
              # Remove the old Nginx configuration
              sudo rm "/etc/nginx/sites-available/${{ matrix.container_name }}"
              sudo rm "/etc/nginx/sites-enabled/${{ matrix.container_name }}"
              sudo nginx -t
              sudo service nginx reload
            fi

            # Rename the new containers to use the original names
            NEW_CONTAINER_PORT1=$(docker port ${{ matrix.container_name }}-new-${TIMESTAMP} 5000 | cut -d ':' -f 2)
            NEW_CONTAINER_PORT2=$(docker port ${{ matrix.container_name }}-new-${TIMESTAMP} 5001 | cut -d ':' -f 2)
            docker rename ${{ matrix.container_name }}-new-${TIMESTAMP} ${{ matrix.container_name }}
            docker rename ${{ matrix.container_name }}-new-${TIMESTAMP} ${{ matrix.container_name }}

            # Update the Nginx configuration with the correct mapped ports for the containers
            sudo sed -i "s/server 127.0.0.1:${{ steps.get_port1.outputs.port }};/server 127.0.0.1:${NEW_CONTAINER_PORT1};/" /etc/nginx/sites-available/load_balancer
            sudo sed -i "s/server 127.0.0.1:${{ steps.get_port2.outputs.port }};/server 127.0.0.1:${NEW_CONTAINER_PORT2};/" /etc/nginx/sites-available/load_balancer
            sudo nginx -t
            sudo service nginx reload
          else
            echo "New containers do not exist. Deployment might have failed."
          fi

      - name: Remove Unused Docker Images
        run: |
          docker image rm -f prathibha097/management-build



